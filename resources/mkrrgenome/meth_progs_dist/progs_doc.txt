	  Programs and Scripts for Bisulphite Sequence Data

Peter A. Stockwell
Dept of Biochemistry,
University of Otago,
Dunedin, New Zealand.

peter.stockwell@otago.ac.nz

16-Nov-2011
----------------------------------------------------------------------

rmapbsbed2cpg
bin_cnts
scan_cpg_depth
mkrrgenome
cleanadaptors

illum2fasta.awk
mk4to1lines.awk
bismmethex2list.awk
tidyrrnams.awk

These programs have been written in the course of work on differential
CpG methylation of the human genome and represent a series of tools
for preparing, modifying and analysing these data.  The work has
particularly focussed on reduced representation (RR) bisulphite
sequencing (RRBS) as in Meissner, et al., 2008, Nature, 454, 766-770,
Smith, et al., 2009) Methods, 48, 226-232 and Gu, et al., 2011, Nature
Protocols, 6, 468-481.  This software should, none-the-less, have
wider application than that.

This is research software so that it is not necessarily easy to use,
although it should work correctly as intended.  It works from a Unix
(MacOS X) or Linux command line interface: the notes below describe the
functionality and format of intermediate files where appropriate.
This code has been generated and tested on a MacOS X system (10.6)
using gcc v4.2.1 and on various Linux platforms (RedHat, Centos,
Fedora, Ubuntu) but is written to compile and run on any appropriate
C compiler and environment.  The size of files and data required for
this work will generally require a 64 bit environment.  Awk scripts
have been developed for the Gnu AWK (gawk) distributed with MacOS X
but, again, they should run in other comparable environments.

Distribution: source code is encorporated into a self-extracting
shell archive which can be run with /bin/sh, or equivalent, to
generate the complete sources and Makefile.  The distributed form is a
file meth_progs_dist.shar which is unpacked by:

/bin/sh meth_progs_dist.shar

generating a directory meth_progs_dist containing two directories:
include, containing some of the generic header files and src
containing the rest of the source code and Makefile.  The set can be
built with the following commands:

cd meth_progs_dist/src
make

or

make CFLGS=-O3

to optimise the code.  Some warnings may appear but these can be
ignored.  The executables will be in the src directory - no install
targets are provided, the completed executables (rmapbsbed2cpg
bin_cnts scan_cpg_depth mkrrgenome cleanadaptors) should be manually
copied to an appropriate directory (e.g. /usr/local/bin).  The awk
scripts are in the src directory and may similarly be copied somewhere
useful.

----------------------------------------------------------------------
rmapbsbed2cpg

Converts a rmapbs BED file or a bsmap output file to a tab-separated
list of Chromosome Position Methylation_status where: 

Chromosome is one of 1,2,3..22,X,Y
Position is an integer
Methylation_status is + or -

This form is suitable for reading into SeqMonk [Text (Generic) format]
or for other programs in this set (cnt_cpg_bins, scan_cpg_depth).

Format of the source files is as documented for the Rmap programs
(Smith, et al. 2008, BMC Bioinformatics, 9, 128-135.).  The format for
bsmap 1.02 is approximately as documented in the README.txt
distributed with that program (Xi & Li, 2009, BMC Bioinformatics, 10,
232-240), although the actual output is not wholly consistent with
their notes.  Further, the output format has been changed at some
point, bsmap 1.2 output is now accepted.

rmapbsbed2cpg expects either a file of reads in FASTQ format or in
FASTA format with a single entry for each read, and with no quality
information.  The included script illum2fasta.awk will generate such a
file from the FASTQ original, noting that the header for each sequence
is shortened in the following way:

HWI-EAS209_0006_FC706VJ:1:4:1135:18558#0/1

becomes:

>S1_4_1135_185558

or generally

>S{LaneNo}_{TileNo}_{Xpixel}_{Ypixel}

so that each read can be related back to its original FASTQ form.

rmapbsbed2cpg will now correctly manage HiSeq flowcells with different
tile numbers from the original GAII flowcells.  Also V3 of the
chemistry is managed (see -v and -V) options.

Chromosome sequences are expected as FASTA files with a single entry
for each chromosome in its own file (as for the GRCh37 build used by
Bismark/SeqMonk).  Each chromosome file name should end <n>.fa where
<n> is 1,2,3..22,X,Y.  The program allows for the complete set to be
addressed by an absolute or relative path (e.g. 
/Volumes/SomeDiskName/HomoSapiens_genome/hs_ref_GRCh37/Homo_sapiens.GRCh37.59.dna.chromosome.
or ../../WhereIPutThem/Homo_sapiens.GRCh37.59.dna.chromosome. ).

Program Options:

rmapbsbed2cpg (v2.31): generate list of CpG positions from rmapbs BED file
Options:
     -r <readfile> reads from Fasta fmt. <readfile>
     -R <readfile> reads from fastq <readfile>
     -v HiSeq V3 flowcell, V2 chemistry (def V2 GAII flowcell)
     -V HiSeq V3 flowcell, V3 chemistry (def V2 GAII flowcell)
     -b <bedfile> read match information from <bedfile> (rmapbs bed format)
     -B <bsmapfile> read match information from <bsmapfile> (bsmap V1.02 output format)
     -A <bsmapfile> read match information from <bsmapfile> (bsmap V1.2 output format)
     -p <posfile> read RR sections (mkrrgenome -m output) from <posfile>, count hits/misses
     -g <genomehead> dir and file string to locate genomic seq files by adding n.fa

-v & -V interpret tile numbers as for HiSeq flowcells, versions 2 & 3
chemistry, respectively.  By default GAII flowcells are expected with
tile numbers 1..120.  When the other options are selected, the program
remaps the file numbers 1101..2308 to successive integer values in
order to minimise internal array dimensions.

Output is to stdout.

The program works by loading the reads into a series of linked lists
by tile number.  Each chromosome is read into a long string in RAM,
pre-malloc()ed to contain an adequately long sequence.  The aligned
read information from the BED or bsmap files is read and the
positional information is used to set start & stop locations for each
read in the tile-based linked list repository.  Difficulty was
encountered with bsmap runs where some run options will generate
shortened read alignments and for which out-by-one position errors
were evident.  Shortened reads require that the original FASTA file
sequence read is replaced by the actual bsmap-returned alignment read
and appropriate position corrections made.

The program uses linked lists in order to prevent array-length limits
from restricting operation arbitrarily and between that and the need
to store the complete sequence of each chromosome poses large RAM
requirements.  Linear scanning through linked lists also takes time
and while strategies could be devised to improve this performance, the
present execution time and RAM needs are acceptable.  Running some
15e06 reads against the human genome on the development machine (Mac
Pro, Duo Quad Core 2.8GHz) takes several hours and requires some 8Gb
RAM.  (The code is single threaded and does not, itself, benefit from
multiple cores.)

A typical run might look like

rmapbsbed2cpg -r myfastafmtreads.fa -b rmapbsoutput.bed -g
/Volumes/VMWare/HomoSapiens_genome/hs_ref_GRCh37/Homo_sapiens.GRCh37.59.dna.chromosome. >
myrmapbscpglist.txt

where the whole command is complete on one line.

----------------------------------------------------------------------
bin_cnts:

Still under significant development: to take CpG positions as
generated by rmapbsbed2cpg or the Bismark methylation_extractor
programs and store the counts in a series of bins which are generated
in a series of different ways.  The program further aims to produce
figures for differential methylation by the method of Li, et al.
(2010, PLOSBiology,11,e1000533) and contains procedures to assist with
bin selection for that.  RRBS based bin selection is supported and the
program output allows either the contents of such bins to be listed
or, optionally, for the counts which miss such bins to be shown, in
order to indicate when aligners are mapping reads outside expected RR
regions.  The program is also capable of generating pseudo feature
table information for SeqMonk so that RR genomes can be annotated with
RR fragment positions.

The source file(s) for -r & -R options are as generated by
rmapbsbed2cpg.

Chromosome source files (-g option) are specified as for
rmapbsbed2cpg.

Options:

bin_cnts: create binned counts for chromosomal positions
Options:
     -r <posfile> read <posfile> as set of chr posit strand/meth
     -R <posfile2> as -r but for 2nd position file
     -b <binlength>: set bin length (def=1000)
     -g <genomehead> dir and file string to locate genomic seq files by adding n.fa
     -l/-L list bins (-L=>only nonzero bins)
     -m scan for diff meth regions restricted rep (Li, et al. (2010) PLOSBiology,11,e1000533)
     -M <j,k> scan for restricted rep fragment sizes between j & k residues. Make bins
     -N as for -M but list bins to stdout
     -k as for -M, but note reads which don't map into restricted rep bins
     -K as for -k, but only print totals for meth & unmeth counts
     -S <dirheader> write .dat files to <dirheader> for RR genome for SeqMonk
     -c <n> restrict effort to Chromosome <n> (def = all chromosomes)
     -C <n> restrict bins to those with <n> or more CpGs
     -A attempt to amalgamate restr rep regions that might otherwise fail CpG criteria
(     -x <excludefile> exclude regions (fmt: Chrno regionstart
regionend) 

Output is generally to stdout, excepting the -S option.

The -c option to restrict operation to a single selected chromosome is
really only for developing the program in order to speed up checking
its operation.

The -M, -N, -k & -K options use the MspI recognition/cleavage site
C^CGG and the j,k size range to select valid fragments.  If either j
or k is zero, then that limit is not applied (e.g. -M 0,220 will
include all MspI fragments from zero to 220 residues; -m 50,0 will
include all fragments over 50 residues).  Note that the program
applies the limits precisely whereas fragment size selection on a gel
will never be so exact.

The -x option to exclude some chromosomal regions has not been
implemented yet.

Differential methylation (-m option) is yet to be implemented.

Like rmapbsbed2cpg, bin_cnts used linked lists for internal data
storage in order to avoid arbitrary limits.  The strategy for scanning
genomic sequences for CCGG and CpG sites avoids the need to load
chromosome sequences into RAM.  The consequences are that bin_cnts has
a lesser memory footprint that rmapbsbed2cpg although moderate run
times can be expected.

Typical use might be:

bin_cnts -r myrmapbscpglist.txt -g
/Volumes/VMWare/HomoSapiens_genome/hs_ref_GRCh37/Homo_sapiens.GRCh37.59.dna.chromosome.
-M 40,220 -L > mynonzero40_220bins.cnts

will list the nonzero bins for 40 to 220 bp MspI fragments to a file
mynonzero40_220bins.cnts.

bin_cnts -r myrmapbscpglist.txt -g
/Volumes/VMWare/HomoSapiens_genome/hs_ref_GRCh37/Homo_sapiens.GRCh37.59.dna.chromosome.
-k 40,220 > missed40_220bins.cnts

will list bins which contain counts that don't fit in the 40-220 RR
genome bins.

bin_cnts -r myrmapbscpglist.txt -g
/Volumes/VMWare/HomoSapiens_genome/hs_ref_GRCh37/Homo_sapiens.GRCh37.59.dna.chromosome.
-K 40,220

will return to stdout (terminal) methylated and unmethylated total counts
which miss the RR genome bins.

----------------------------------------------------------------------
scan_cpg_depth:

Scans for the read depth of CpG positions on the genome.  Also will
list reads which don't map to CpGs in order to track down problems.
Returned information is a raw list of CpG positions with the counts,
statistics (mean, median and mode and standard deviation of count
distribution) or a histogram of count frequencies.

The source file (-r option) is as generated by rmapbsbed2cpg.

Chromosome source files (-g option) are specified as for
rmapbsbed2cpg.

scan_cpg_depth: scan for CpG read depth for all or selected chromosomes
Options:
     -r <posfile> read <posfile> as set of chr posit strand/meth
     -g <genomehead> dir and file string to locate genomic seq files by adding n.fa
     -C <m> use cluster size of <m> for chromosome positions, Def=1000
     -l list each CpG to stdout with counts
     -c <n> restrict to Chromosome <n> 1..22,X,Y. Def=all
     -p Permit out-by-one positions (e.g. Bismark complementary strand CpGs) def=don't
     -S generate statistics (range, mean, std deviation, etc. for counts
     -H generate histogram of counts
     -m list missed CpG lines
     -n list CpG hits (Nonmisses)
     -z omit zero count from histogram

Output is to stdout.

The -C clustersize option is to control the scheme which allows rapid
lookups into the linked lists of chromosomal CpG positions to prevent
the program from taking excessively long to execute.  The default
cluster size is 1000, decreasing it will increase the memory
requirements, but decrease execution time.  Conversely...

The genome files are specified by the -g option, as above.

-l will generate a very lengthy list of CpG positions and the + & -
counts for each.

-S generates statistics for the depth of hits at each CpG.  Note that
this presently includes the 0 count bin which probably produces
misleading values, since typical RR runs will not hit all CpGs.

-H produces a printer-type histogram of count frequencies.  Since the
zero count bin will always contain unhitable CpGs, the -z option is
offered to scale the histogram to the highest non-zero count.  Note
that the statistics output (-S) is not altered by -z.

For diagnostic purposes, the -m and -n options are given to produce a
list of the missed or hit positions respectively before other output
options are processed.

For reads pairing to the complementary sequence some aligners
(e.g. Bismark v 0.2.3 methylation_extractor) produce alignment
positions that are out-by-one.  The -p option will permit positions to
be out by one residue in order to use all of the read data.

e.g.:

----------------------------------------------------------------------
mkrrgenome:

Scans fasta files for MspI (C^CGG) cleavage positions and concatenates
the fragments for each chromosome which fit into a specified size
range into a single contiguous sequence in a fasta file.  Optionally
generates a list of those positions.

mkrrgenome (v1.00: generate reduced representation genome files for MspI digests)
Options:
     -g <genomehead> dir and file string to locate genomic seq files by adding n.fa
     -c <C_no> restrict activity to chromosome C_no (1..22,X,Y), def = all
     -M <j,k> scan for restricted rep fragment sizes between j & k residues. (def=40..220)
     -m <j,k>   ditto, produce tab delimited list of positions to stdout
     -G <desthead> dir & file string for output genome files (-M), completed with n.fa

Input files are specified with the -g option as previously.

Output is to a fasta file for each chromosome processed - the pathname
and initial file name for the whole series is specified by the -G
option.

Desired fragment size is specified for the -M option as two
comma-separated values for the minimum and maximum values.  Giving a 0
as one of the values will disable that comparison so that, for
instance, -M 0,150 will use all fragments up to 150 bp while -M 40,0
will save all fragments over 40 bp.

Similar specifications apply to the -m listing of fragments to stdout.

mkrrgenome uses a finite-state-machine (FSM) method for the rapid
scanning of chromosomal sequences for CCGG sites and for quantifying
CpGs.

e.g.: 

mkrrgenome -g \
/Volumes/Human_genome/GRCh37/Homo_sapiens.GRCh37.59.dna.chromosome. \
-M 20,240 -G myRR_20_240genome/rrChr

will process each of the files
Homo_sapiens.GRCh37.59.dna.chromosome.1.fa, etc. to a RR genome for
size 10..240 MspI fragments saving each chromosome as rrChr1.fa,
etc. in the local directory myRR_20_240genome.  The fasta headers will
resemble:

>1rr reduced repr 20..240 for MspI digest Chr1 7215473/249250621bp CpG: 413964

or e.g.:

mkrrgenome -g \
/Volumes/Human_genome/GRCh37/Homo_sapiens.GRCh37.59.dna.chromosome. \
-c 22 -m 20,240

will generate a listing with a line for each MspI fragment in the size
range 20..240 bp of chromosome 22 like:

22	16054424..16054453 (30 bp) CpG: 3
22	16060689..16060841 (153 bp) CpG: 2
22	16075293..16075412 (120 bp) CpG: 3
22	16075413..16075526 (114 bp) CpG: 2
22	16075527..16075627 (101 bp) CpG: 5
22	16085649..16085716 (68 bp) CpG: 4
22	16086414..16086578 (165 bp) CpG: 3
22	16086912..16086959 (48 bp) CpG: 2
22	16094410..16094476 (67 bp) CpG: 3
22	16096038..16096177 (140 bp) CpG: 7

----------------------------------------------------------------------
cleanadaptors:

Check FASTQ or FASTA files for Illumina adaptor sequences and trim
them if desired.  The use of short RR libraries can result in longer
Illumina reads sequencing through into the adaptor sequence giving
reads that may fail to align even although the pre-adaptor section is
valid.  Alternatively, if reads containing a significant length of
adaptor succeed in aligning then they are more likely to be
erroneously placed and will contribute unwanted bias to analyses.

cleanadaptors uses a finite-state-machine to
provide a very efficient means of finding leading fragments of adaptor
sequences, then completes the checks by comparing the trailing
sequence with the whole adaptor to ensure that a reasonable degree of
similarity is achieved.  Since read qualities deterioriate at higher
cycle numbers, complete matching is not expected.

Output options include listing the source data with adaptor matches
indicated in the listing (-f), or to have the reads trimmed to remove
any adaptor sequences which achieve criteria for matching (-F).  In
order to trace operation of the program, match listings can show only
reads which do match (-H).

cleanadaptors v1.04: scan Illumina reads for adaptor seqs: Trim FASTA/FASTQ files
Options:
     -i <adaptorfile> file of adaptor seqs 1/line)
         (def="AGATCGGAAGAGCGGTTCAGCAGGAATGCCGAGACCGATC": 40bp of Universal adaptor)
     -l max adaptor length (def=256)
     -m min leading match for adaptor (def=6)
     -M margin at read end for trimming (def=0)
     -R readfile buffer length (def=256)
     -s <skipres> skip <skipres> on each read before checking matches
     -p <%> % match threshold with adaptor sequence for hit (def=75.0%)
     -S enable single base mismatches (def=disallow)
     -L print fsm to stdout
     -F <readfile>: run scan on <readfile> FASTQ/FASTA fmt, trim matching ends
     -z <readfile>: as -F but don't check length of trimmed reads
     -x <lengthlimit>: only save trimmed reads exceeding length limit (def=1)
     -t <3'trimlength>: take further 3'trimlength bases before adaptor match (def=0)
     -N <readfile>: fill lines with 'N's rather than trimming
     -f <readfile>: run scan on <readfile> FASTQ/FASTA fmt, show all reads, indicate matches
     -H <readfile>: run scan on <readfile> FASTQ/FASTA fmt, indicate matches on hit reads only
         if <readfile> is '-', then use stdin

<adaptorfile> is a text file containing sequences, 1 per line.  If
this option is not used, the program defaults to the first 40bp of the
Illumina universal adaptor.

-l: Only necessary if the length of any adaptor sequence exceeds 256
bp.

-m sets the minimum length for an initial adaptor match.  The default
(6) is a reasonable value.  Note that enabling single base mismatches
(-S) will reduce the required match by 1 over this length.

-M sets the 3' margin for matches before reads will be trimmed.  So, a
value of 10 would only trim if the adaptor match was in the last 10
residues of the read.  The default is 0 which means don't apply this
criterion.

-R sets the read buffer length and is only necessary if reads or
header lines exceed 256 characters.

-s sets the number of residues skipped before adaptor matches will be
checked.  Clearly if a reduced representation library of say 40-220 bp
has been used, then there should be no need to check for adaptor
sequences before 40 bp of each read, hence setting -s 40 would achieve
this, giving a marginal increase in performance.

-p sets the % match of read vs entire adaptor sequence, from the point
where the match begins till the end of the read or the adaptor.
75.0% is the default.  The performance of the program does not seem to
be very sensitive to this value, increasing it from the default to 90%
only makes a marginal change in the number of residues trimmed on real
data.

-S enables single base mismatches during the FSM scan operation and
may help if there is a significant tendency for single residue read
errors.  This option extensively lengthens the time taken to build the
FSM, since it causes each base position to be expanded to A,C,G & T
for all of the adaptor lengths from the minimum to the full length.
Given that the default scanning looks for a 6 bp match to the start of
the adaptor sequence and then checks for 75.0% or greater match over
the full adaptor length, this option is probably not really needed, so
the default is for it to be disabled.

-L lists the FSM to stdout: no read scanning is done.  This is really
for checking the FSM-building process.

-f lists the entire read file with adaptor matches and their quality
shown.  Each match is labelled with a string Ad_<n>_l<m> where <n> is
the adaptor number (line No. in file) and <m> is the greatest matching
length from the 5' end of the adaptor.  If the -S option is used, then
the label is extended to Ad_<n>_l<m>_<Ba><k><Bs> where <Ba> is the
substituted adaptor residue, <k> its position and <Bs> the substituted
residue (e.g. Ad_1_l8_G6C means an 8 residue match with adaptor
sequence 1 where the adaptor G at position 8 is substituted with a C).

-H similar to -f, except that only reads which have matches meeting
the criteria are shown.  For testing purposes mainly.

-F,-z perform the trim operation, writing the trimmed data to stdout.
Resulting sequences shorter than the limit defined by -x and their
headers are suppressed unless the -z option is used.  No labels are
generated, matching sequences reads are just truncated, along with the
quality line in FASTQ files.  Since cleanadaptors focusses on the
longest match for each read, it may be appropriate to run through the
data more than once.  Tests on read data here show that two passes
have completely eliminated traces of adaptor sequence both by using
the FastQC application
(http://www.bioinformatics.bbsrc.ac.uk/projects/fastqc/) and by using
cleanadaptors to check for subsequent matches.  The -f, -H & -F
options will accept '-' as a file specification so that cleanadaptor
runs can be piped together with a command like:

cleanadaptors -F s_1_sequence.txt | cleanadaptors -F - | cleanadaptors -H -

which will read the original reads from s_1_sequence.txt, trim it
twice with the default universal adaptor then display any remaining
matches.  Any specifically modified 3' residues can further be trimmed
by using the -t option as well.

-x sets the minimum length for a trimmed read to be saved, defaults to
1.  The Bowtie aligner used by Bismark requires a minimum of 4 bp, so
this option can be used to suppress the rejection of shorter trimmed
reads at the alignment stage.  Setting the limit to zero disables the
check (which is what -z does).  It is possible to exclude any trimmed
reads by using the -x option with the read length of the data.

-t trims further back into the 3' end of the trimmed read in order to
ensure that any residues modified in the library creation steps are
removed.

-N replaces trimmed sequence (and quality chars) with 'N's in order to
conserve the line length.  Rmapbs seems to require this.  The effects
of -x are as for trimmed lines.  In the unlikely event that it is
desired to write out lines which have no untrimmed sequence, then -x 0
will permit that.

cleanadaptors writes all output to stdout, so that saving the output
to a new file is performed with normal Unix/Linux redirection:

E.g.:

cleanadaptors -i myilluminaadaptors.txt -F s_1_sequence.txt > s_1_trimmed.txt

which will trim any adaptors from the file myilluminaadaptors.txt,
saving the output to s_1_trimmed.txt.

cleanadaptors -i myilluminaadaptors.txt -F s_1_sequence.txt -t 2 > s_1_tr_2.txt

which will trim a further 2 residues back into the 3' end of reads
which have an adaptor match.

----------------------------------------------------------------------
illum2fasta.awk

a script which converts illumina fastq read files into fasta format.
The header lines are simplified in a way which reduces the read IDs
significantly in length but retains lane number, tile number and pixel
coordinates so that it remains possible to trace back to the original
fastq reads.  For instance, the fastq lines

@HWI-EAS209_0006_FC706VJ:1:1:1132:9986#0/1
CGGGTTTGGGTGGAGATTTTTTTTTTATGAAATATCGTTTTTGCGTGGTGTTTGGTTTTGTTTTTTTTTTTGTGTTTTTTTTTTTTTGTTTTTTGTGTTT
+HWI-EAS209_0006_FC706VJ:1:1:1132:9986#0/1
ddbd_ccccc^ccR\L\Q]^caBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB
@HWI-EAS209_0006_FC706VJ:1:1:1134:20156#0/1
CGGCGTTGTTTATGTTGGTTGGGTTTGGTATGTGATTTAGTATTTTGTTTTTTTGGGTTGGGTTGGGGGGGTTGGTTTTTTTTTGGTTTGTTGGGGTGTG
+HWI-EAS209_0006_FC706VJ:1:1:1134:20156#0/1
dddcddaddddRdddcddd`dd\dd`L`_LR\UZF`b`L^WTNa^BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB

become:

>s1_1_1132_9986
CGGGTTTGGGTGGAGATTTTTTTTTTATGAAATATCGTTTTTGCGTGGTGTTTGGTTTTGTTTTTTTTTTTGTGTTTTTTTTTTTTTGTTTTTTGTGTTT
>s1_1_1134_20156
CGGCGTTGTTTATGTTGGTTGGGTTTGGTATGTGATTTAGTATTTTGTTTTTTTGGGTTGGGTTGGGGGGGTTGGTTTTTTTTTGGTTTGTTGGGGTGTG

Clearly the quality lines are eliminated, but the other information is
coerced into a form which should be valid for FASTA file readers.

Use: run with awk.  The output is to stdout, so normal redirection
will work.

e.g.:

awk -f illum2fasta.awk s_1_sequence.txt > s_1_fasta.fa

The script is relatively rapid, processing 18x10^6 100bp reads took
about 7 minutes on a Mac Pro with dual quad core Xeon 2.8 GHz CPUs
though only a single core was employed.  Far too rapid to be bothered
writing something more efficient.

----------------------------------------------------------------------
mk4to1lines.awk

a script to write each group of 4 fast2 lines to a single line for the
purposes of filtering bad tiles using Unix/Linux commands.  The
process is easily reversed using the tr command.  The new line
characters for each read are replaced with a default of ';'.

For instance in an experiment it is wished to eliminate tiles 1, 2, 3,
40, 63, 119 & 120 due to airbubbles or inferior performance at flow
cell extremes.  So a series of lines matching the fastq header lines
for that series of poor tiles, like:

FC706VJ:1:1:
FC706VJ:1:2:
FC706VJ:1:3:
FC706VJ:1:40:
FC706VJ:1:63:
FC706VJ:1:119:
FC706VJ:1:120:

would be written to a text file (kill_tiles.txt for example), then the
complete reads for those tiles could be deleted from the experiment by
the following command:

awk -f mk4to1lines.awk s_1_sequence.txt | grep -v -f kill_tiles.txt | \
tr ";" "\n" > s_1_seq_filtered.txt

in which the grep command will pass all lines not matching any entries
in the kill_tiles.txt file and the tr command restores ';' line
separators to Unix/Linux new lines.

The default line separator for this script can be altered by the
following, in this case to a '!':

awk -f mk4to1lines.awk -v catchar='!' s_1_sequence.txt

The value of this script and these operations may be less important
for HiSeq information, since the reduced number of tiles will cause
too much data to be discarded in comparison with the Illumina GAIIx
platform.

----------------------------------------------------------------------
bismmethex2list.awk

a script to generate simple tab-delimited lists of chromosome No,
position, methylation status from the output of the BisMark
methylation_extractor program.  This leaves the data in a form which
is amenable to further processing by scan_cpg_depth or bin_cnts.

The operation is very simple, the extractor produces lines ending in
'Z' for methylated CpG and 'z' for unmethlated.  This script just
converts these to +/-.

Changes in header lines from CASAVA 1.8 have required a modification
since more fields are now written to the output file.  The variable
zcol defines where the script expects the 'Z' & 'z' chars to be.  zcol
presently defaults to 5 for GAII style headers, but should be defined
to 6 for HiSeq output.

Use:

awk -f bismmethex2list.awk CpG_CTOT_s_1_sequence.txt_bismark.txt

or

awk -f bismmethex2list.awk zcol=6 CpG_CTOT_hiseq_casava1.8.txt_bismark.txt

writes the converted lines to stdout where they can be captured by
commandline redirection.

----------------------------------------------------------------------
tidyrrnams.awk

Script to correct chromosome names from mkgenomes.  In order to
distinguish the names from the unmodified defaults (1,2..22,X,Y) they
have rr appended to them, but this can complicate downstream
processing, hence this script which can flexibly remove rr suffixes.
This script replaces a number of earlier ones which had been tailored
to specific output file formats but, by writing this version in a
slightly more intelligent way, it manages variant formats, like .BED
files and bsmap output.  

E.g. rmapbs output run on RR genome gives:

Xrr	529488	529538	HWI-EAS209_0006_FC706VJ:1:2:10354:4724#0/1	1	+
15rr	241793	241843	HWI-EAS209_0006_FC706VJ:1:3:5446:13600#0/1	7	+
16rr	2800644	2800694	HWI-EAS209_0006_FC706VJ:1:5:13647:7002#0/1	5	+
[...]

where we need to modify field 1, so the command

awk -f <path>tidyrrnams.awk splitfield=1 <mybedfile>.bed > <modifiedfile>.bed

will alter the chromsome ids to X,15,16... respectively for this
example.  splitfield defaults to 1 so the parameter 'splitfield=1'
could be omitted.

bsmap generates output like:

HWI-EAS209_0006_FC706VJ:1:1:6899:15689#0/1	GGTAATTTTTTTTATTGTTTTTTGTAGTAGGTGTTGAGT	UM	Xrr	613451	-+	0	1:0:0:0:0	mC
HWI-EAS209_0006_FC706VJ:1:1:6900:16423#0/1	GGGTTTTTGTTTTATAAAGTGGGTAGTGGTAAAGTGTTG	UM	2rr	1760913	-+	0	1:0:0:0:0	mC
HWI-EAS209_0006_FC706VJ:1:1:6900:4193#0/1	GGAATAGTTTTTGGTATATAGTAGGTATTTAATAATTGT	UM	5rr	2861341	++	1	0:1:0:1:0	mC

once unique matches are selected, with the chromosome id in the fourth
field.  So the command:

awk -f <path>tidyrrnams.awk splitfield=4 <mybsmapoutfile> > <renamedbsmapfile>

will work.

Bismark output writes the chromosome name to the 3rd field of output
report files, so 'splitfield=3' is appropriate there.

----------------------------------------------------------------------
